from eth_account import Account
from mnemonic import Mnemonic
import json
import os

# –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HDWallet-—Ñ—É–Ω–∫—Ü–∏–π
Account.enable_unaudited_hdwallet_features()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
def generate_wallet():
    mnemo = Mnemonic("english")  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫—É—é —Ñ—Ä–∞–∑—É
    mnemonic_phrase = mnemo.generate(strength=128)  # 12 —Å–ª–æ–≤
    acct = Account.from_mnemonic(mnemonic_phrase)  # –°–æ–∑–¥–∞–µ–º –∫–æ—à–µ–ª–µ–∫

    wallet_data = {
        "mnemonic": mnemonic_phrase,
        "private_key": acct.key.hex(),
        "address": acct.address
    }

    return wallet_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_wallets(wallets, filename="wallets.json"):
    if os.path.exists(filename):
        with open(filename, "r") as f:
            existing_wallets = json.load(f)
    else:
        existing_wallets = []

    existing_wallets.extend(wallets)

    with open(filename, "w") as f:
        json.dump(existing_wallets, f, indent=4)

# –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
try:
    num_wallets = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: "))
    if num_wallets <= 0:
        raise ValueError("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
except ValueError as e:
    print(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
    exit(1)

print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {num_wallets} –∫–æ—à–µ–ª—å–∫–æ–≤...")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤
wallets = [generate_wallet() for _ in range(num_wallets)]

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
save_wallets(wallets)

print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {num_wallets} –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ wallets.json!")
